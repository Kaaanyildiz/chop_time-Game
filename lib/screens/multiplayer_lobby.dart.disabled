import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/multiplayer_controller.dart';
import '../models/multiplayer_models.dart';
import '../services/firebase_service.dart';

class MultiplayerLobby extends StatefulWidget {
  const MultiplayerLobby({super.key});

  @override
  State<MultiplayerLobby> createState() => _MultiplayerLobbyState();
}

class _MultiplayerLobbyState extends State<MultiplayerLobby> 
    with TickerProviderStateMixin {
  late AnimationController _backgroundController;
  late AnimationController _cardController;
  late Animation<double> _backgroundAnimation;
  late Animation<double> _cardAnimation;
  
  final TextEditingController _playerNameController = TextEditingController();
  final TextEditingController _roomNameController = TextEditingController();
  final TextEditingController _roomCodeController = TextEditingController();
  
  bool _showCreateRoom = false;
  bool _showJoinRoom = false;
  bool _isLoading = false;
  
  @override
  void initState() {
    super.initState();
    
    _backgroundController = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    );
    
    _cardController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _backgroundAnimation = Tween<double>(begin: 0, end: 1)
        .animate(CurvedAnimation(parent: _backgroundController, curve: Curves.easeInOut));
    
    _cardAnimation = Tween<double>(begin: 0, end: 1)
        .animate(CurvedAnimation(parent: _cardController, curve: Curves.elasticOut));
    
    _backgroundController.repeat(reverse: true);
    _cardController.forward();
    
    _playerNameController.text = 'Oyuncu${DateTime.now().millisecondsSinceEpoch % 1000}';
  }
  
  @override
  void dispose() {
    _backgroundController.dispose();
    _cardController.dispose();
    _playerNameController.dispose();
    _roomNameController.dispose();
    _roomCodeController.dispose();
    super.dispose();
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: AnimatedBuilder(
        animation: _backgroundAnimation,
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: Alignment.topLeft,
                radius: 1.5 + (_backgroundAnimation.value * 0.3),
                colors: const [
                  Color(0xFF6A1B9A),
                  Color(0xFF8E24AA),
                  Color(0xFF9C27B0),
                  Color(0xFF1A0E3D),
                ],
                stops: const [0.0, 0.3, 0.6, 1.0],
              ),
            ),
            child: SafeArea(
              child: AnimatedBuilder(
                animation: _cardAnimation,
                builder: (context, child) {
                  return Transform.scale(
                    scale: _cardAnimation.value,
                    child: _buildMainContent(),
                  );
                },
              ),
            ),
          );
        },
      ),
    );
  }
  
  Widget _buildMainContent() {
    if (_showCreateRoom) {
      return _buildCreateRoomScreen();
    } else if (_showJoinRoom) {
      return _buildJoinRoomScreen();
    } else {
      return _buildMenuScreen();
    }
  }
  
  Widget _buildMenuScreen() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Logo
          Container(
            width: 150,
            height: 150,
            decoration: const BoxDecoration(
              gradient: RadialGradient(
                colors: [
                  Color(0xFFFFD700),
                  Color(0xFFFFA500),
                  Color(0xFFFF6B35),
                ],
              ),
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: Colors.orange,
                  blurRadius: 30,
                  spreadRadius: 5,
                ),
              ],
            ),
            child: const Center(
              child: Text('üî™', style: TextStyle(fontSize: 80)),
            ),
          ),
          
          const SizedBox(height: 30),
          
          // Title
          ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFFFFD700), Color(0xFFFFA500)],
            ).createShader(bounds),
            child: const Text(
              'MULTIPLAYER',
              style: TextStyle(
                fontSize: 36,
                fontWeight: FontWeight.w900,
                color: Colors.white,
                letterSpacing: 3,
              ),
            ),
          ),
          
          const SizedBox(height: 10),
          
          const Text(
            'Arkada≈ülarƒ±nla yarƒ±≈ü!',
            style: TextStyle(
              fontSize: 18,
              color: Colors.white70,
              fontWeight: FontWeight.w500,
            ),
          ),
          
          const SizedBox(height: 60),
          
          // Player Name Input
          Container(
            margin: const EdgeInsets.symmetric(horizontal: 40),
            child: TextField(
              controller: _playerNameController,
              style: const TextStyle(color: Colors.white, fontSize: 18),
              decoration: InputDecoration(
                labelText: 'Oyuncu Adƒ±n',
                labelStyle: const TextStyle(color: Colors.white70),
                prefixIcon: const Icon(Icons.person, color: Colors.white70),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: const BorderSide(color: Colors.white30),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: const BorderSide(color: Colors.orange, width: 2),
                ),
                filled: true,
                fillColor: Colors.white.withValues(alpha: 0.1),
              ),
            ),
          ),
          
          const SizedBox(height: 40),
          
          // Buttons
          Column(
            children: [
              _buildMenuButton(
                'ODA OLU≈ûTUR',
                Icons.add_circle,
                const Color(0xFF4CAF50),
                () => setState(() => _showCreateRoom = true),
              ),
              
              const SizedBox(height: 20),
              
              _buildMenuButton(
                'ODAYA KATIL',
                Icons.login,
                const Color(0xFF2196F3),
                () => setState(() => _showJoinRoom = true),
              ),
              
              const SizedBox(height: 20),
              
              _buildMenuButton(
                'RANDOM ODA',
                Icons.shuffle,
                const Color(0xFFFF9800),
                _joinRandomRoom,
              ),
            ],
          ),
          
          const SizedBox(height: 40),
          
          // Back button
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              'Ana Men√ºye D√∂n',
              style: TextStyle(
                color: Colors.white70,
                fontSize: 16,
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildMenuButton(String text, IconData icon, Color color, VoidCallback onPressed) {
    return Container(
      width: 250,
      height: 60,
      child: ElevatedButton(
        onPressed: _isLoading ? null : onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.transparent,
          shadowColor: Colors.transparent,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(30),
          ),
        ),
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [color, color.withValues(alpha: 0.7)],
            ),
            borderRadius: BorderRadius.circular(30),
            boxShadow: [
              BoxShadow(
                color: color.withValues(alpha: 0.4),
                blurRadius: 15,
                offset: const Offset(0, 5),
              ),
            ],
          ),
          child: Center(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(icon, color: Colors.white, size: 24),
                const SizedBox(width: 10),
                Text(
                  text,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  Widget _buildCreateRoomScreen() {
    return Center(
      child: Container(
        margin: const EdgeInsets.all(20),
        padding: const EdgeInsets.all(30),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.white.withValues(alpha: 0.15),
              Colors.white.withValues(alpha: 0.05),
            ],
          ),
          borderRadius: BorderRadius.circular(25),
          border: Border.all(color: Colors.white30),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'ODA OLU≈ûTUR',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            
            const SizedBox(height: 30),
            
            TextField(
              controller: _roomNameController,
              style: const TextStyle(color: Colors.white, fontSize: 18),
              decoration: InputDecoration(
                labelText: 'Oda Adƒ±',
                labelStyle: const TextStyle(color: Colors.white70),
                prefixIcon: const Icon(Icons.meeting_room, color: Colors.white70),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: const BorderSide(color: Colors.white30),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: const BorderSide(color: Colors.green, width: 2),
                ),
                filled: true,
                fillColor: Colors.white.withValues(alpha: 0.1),
              ),
            ),
            
            const SizedBox(height: 30),
            
            Row(
              children: [
                Expanded(
                  child: _buildActionButton(
                    'ƒ∞PTAL',
                    Colors.red,
                    () => setState(() => _showCreateRoom = false),
                  ),
                ),
                const SizedBox(width: 20),
                Expanded(
                  child: _buildActionButton(
                    'OLU≈ûTUR',
                    Colors.green,
                    _createRoom,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildJoinRoomScreen() {
    return Center(
      child: Container(
        margin: const EdgeInsets.all(20),
        padding: const EdgeInsets.all(30),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.white.withValues(alpha: 0.15),
              Colors.white.withValues(alpha: 0.05),
            ],
          ),
          borderRadius: BorderRadius.circular(25),
          border: Border.all(color: Colors.white30),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'ODAYA KATIL',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            
            const SizedBox(height: 30),
            
            TextField(
              controller: _roomCodeController,
              style: const TextStyle(color: Colors.white, fontSize: 18),
              decoration: InputDecoration(
                labelText: 'Oda Kodu',
                labelStyle: const TextStyle(color: Colors.white70),
                prefixIcon: const Icon(Icons.vpn_key, color: Colors.white70),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: const BorderSide(color: Colors.white30),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: const BorderSide(color: Colors.blue, width: 2),
                ),
                filled: true,
                fillColor: Colors.white.withValues(alpha: 0.1),
              ),
            ),
            
            const SizedBox(height: 30),
            
            Row(
              children: [
                Expanded(
                  child: _buildActionButton(
                    'ƒ∞PTAL',
                    Colors.red,
                    () => setState(() => _showJoinRoom = false),
                  ),
                ),
                const SizedBox(width: 20),
                Expanded(
                  child: _buildActionButton(
                    'KATIL',
                    Colors.blue,
                    _joinRoomByCode,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildActionButton(String text, Color color, VoidCallback onPressed) {
    return Container(
      height: 50,
      child: ElevatedButton(
        onPressed: _isLoading ? null : onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.transparent,
          shadowColor: Colors.transparent,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(25),
          ),
        ),
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [color, color.withValues(alpha: 0.7)],
            ),
            borderRadius: BorderRadius.circular(25),
          ),
          child: Center(
            child: _isLoading
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  )
                : Text(
                    text,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
          ),
        ),
      ),
    );
  }
  
  Future<void> _createRoom() async {
    if (_playerNameController.text.trim().isEmpty) {
      _showError('Oyuncu adƒ± girmelisin');
      return;
    }
    
    if (_roomNameController.text.trim().isEmpty) {
      _showError('Oda adƒ± girmelisin');
      return;
    }
    
    setState(() => _isLoading = true);
    
    try {
      final controller = context.read<MultiplayerController>();
      final roomId = await controller.createRoom(
        _roomNameController.text.trim(),
        _playerNameController.text.trim(),
        4, // Max 4 players
      );
      
      // Navigate to room screen
      Navigator.pushReplacementNamed(
        context,
        '/multiplayer_room',
        arguments: roomId,
      );
      
    } catch (e) {
      _showError(e.toString());
    } finally {
      setState(() => _isLoading = false);
    }
  }
  
  Future<void> _joinRoomByCode() async {
    if (_playerNameController.text.trim().isEmpty) {
      _showError('Oyuncu adƒ± girmelisin');
      return;
    }
    
    if (_roomCodeController.text.trim().isEmpty) {
      _showError('Oda kodu girmelisin');
      return;
    }
    
    setState(() => _isLoading = true);
    
    try {
      final controller = context.read<MultiplayerController>();
      await controller.joinRoom(
        _roomCodeController.text.trim().toUpperCase(),
        _playerNameController.text.trim(),
      );
      
      // Navigate to room screen
      Navigator.pushReplacementNamed(
        context,
        '/multiplayer_room',
        arguments: _roomCodeController.text.trim().toUpperCase(),
      );
      
    } catch (e) {
      _showError(e.toString());
    } finally {
      setState(() => _isLoading = false);
    }
  }
  
  Future<void> _joinRandomRoom() async {
    if (_playerNameController.text.trim().isEmpty) {
      _showError('Oyuncu adƒ± girmelisin');
      return;
    }
    
    setState(() => _isLoading = true);
    
    try {
      final rooms = await FirebaseService.instance.getAvailableRooms();
      
      if (rooms.isEmpty) {
        _showError('M√ºsait oda bulunamadƒ±');
        return;
      }
      
      final randomRoom = rooms.first;
      final controller = context.read<MultiplayerController>();
      
      await controller.joinRoom(
        randomRoom.id,
        _playerNameController.text.trim(),
      );
      
      // Navigate to room screen
      Navigator.pushReplacementNamed(
        context,
        '/multiplayer_room',
        arguments: randomRoom.id,
      );
      
    } catch (e) {
      _showError(e.toString());
    } finally {
      setState(() => _isLoading = false);
    }
  }
  
  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}
